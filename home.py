# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\ngois\Desktop\QT\home.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from createRoom import Ui_createRoom
from table import Ui_Table
import re
import time
import multiprocessing
class QCustomQWidget(QtWidgets.QListWidget):
    def __init__ (self, parent = None):
        super(QCustomQWidget, self).__init__(parent)
        self.textQHBoxLayout = QtWidgets.QHBoxLayout(self)
        self.textUpQLabel    = QtWidgets.QLabel()
        self.textDownQLabel  = QtWidgets.QLabel()
        self.textQHBoxLayout.addWidget(self.textUpQLabel)
        self.textQHBoxLayout.addWidget(self.textDownQLabel)
        self.setFixedHeight(50)
        # self.allQHBoxLayout  = QtGui.QHBoxLayout()
        # self.iconQLabel      = QtGui.QLabel()
        # self.allQHBoxLayout.addWidget(self.iconQLabel, 0)
        # self.allQHBoxLayout.addLayout(self.textQHBoxLayout, 1)
        self.setLayout(self.textQHBoxLayout)
        # setStyleSheet
     
    def setTextUp (self, text):
        self.textUpQLabel.setText(text)

    def setTextDown (self, text):
        self.textDownQLabel.setText(text)
        
class Runnable(QtCore.QThread):
    notify = QtCore.pyqtSignal(str)
    def __init__(self, user):
        super().__init__()
        self.user = user


    def run(self):
        while True:
            message = self.user.recvMsg()
            self.notify.emit(message)
            # msg = message.split(',')
            # if msg == "joinRoom":
            #     self.joinRoom()
            # elif msg == "room":
            #     self.listRoom(msg)


class Ui_MainWindow(object):
    def __init__(self,user):
        self.user = user
       
        # name = "cuong"
        # self.user.setName(name)
        # self.thread = multiprocessing.Process(target=self.receiveMsg, args=(self.user,))
        self.thread = Runnable(user)
        self.thread.notify.connect(self.receiveMsg)
        self.thread.start()
        
        
        self.MainWindow = QtWidgets.QMainWindow()
        self.MainWindow.setWindowTitle(self.user.name)
        self.setupUi(self.MainWindow)
        self.MainWindow.show()
        self.user.sendMsg("listRoom")
        

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1147, 785)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(420, 540, 151, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(600, 540, 151, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(240, 540, 151, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(60, 540, 161, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.textEdit.setFont(font)
        self.textEdit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.textEdit.setFrameShape(QtWidgets.QFrame.Box)
        self.textEdit.setLineWidth(2)
        self.textEdit.setObjectName("textEdit")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(60, 50, 691, 471))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.listWidget.setFont(font)
        self.listWidget.setObjectName("listWidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1147, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def retranslateUi(self, MainWindow):    
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Tạo phòng"))
        self.pushButton.clicked.connect(self.createRoom)
        self.pushButton_2.setText(_translate("MainWindow", "Tham gia"))
        self.pushButton_2.clicked.connect(self.joinRoom)
        self.pushButton_3.setText(_translate("MainWindow", "Tìm phòng"))
        self.pushButton_3.clicked.connect(self.refresh)
        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:14pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        __sortingEnabled = self.listWidget.isSortingEnabled()
        # for x in range(0,10):
        #     myQCustomQWidget = QCustomQWidget()
        #     myQCustomQWidget.setTextUp(str(x))
        #     myQCustomQWidget.setTextDown("cuong")
        #     item = QtWidgets.QListWidgetItem(self.listWidget)
        #     print(myQCustomQWidget.sizeHint())
        #     self.listWidget.addItem(item)
        #     self.listWidget.setItemWidget(item,myQCustomQWidget)
        for x in range(10):
            item = "new item \t a"
            self.listWidget.addItem(item)
        self.listWidget.setSortingEnabled(__sortingEnabled)
        self.listWidget.itemPressed.connect(self.itemPres)
    def showRoom(self):
        item = self.listWidget.selectedItems()[0].text()
        room_id = re.split("\t+", item)
        print("Selected items: ", room_id)
        
    def itemPres(self):
        self.pushButton_2.setEnabled(True)

    def refresh(self):
        self.user.sendMsg("listRoom")

    def listRoom(self,msg):
        self.pushButton_2.setEnabled(False)
        self.listWidget.clear()
        msg.pop(0)
        for x in msg:
            self.listWidget.addItem(x)

    def createRoom(self):
        self.ui = Ui_createRoom()
        self.ui.pushButton.clicked.connect(self.cancel)
        self.ui.pushButton_2.clicked.connect(self.create)
        self.MainWindow.setEnabled(False)

    def cancel(self):
        del self.ui
        self.MainWindow.setEnabled(True)

    def create(self):
        self.user.sendMsg("createRoom") 

    def join(self):
        del self.MainWindow
        if hasattr(self,"ui"): del self.ui
        Ui_Table(self.user,self.thread) 


    def joinRoom(self,id):
        item = self.listWidget.selectedItems()[0].text()
        room_id = re.split("\t+", item)[0]
        self.user.sendMsg("joinRoom,"+room_id)

    def receiveMsg(self,message):
        msg = message.split(',')
        if msg[0] == "joinRoom":
            self.join()
        elif msg[0] == "room":
            self.listRoom(msg)

class Room:
    def __init__(self, user,thread):
        self.thread = thread
        self.user = user
        self.size = 1
        self.UI = Ui_Table()
        self.thread.notify.disconnect()
        self.UI.pushButton.clicked.connect(self.skip)
        self.UI.pushButton_2.clicked.connect(self.play)
        self.UI.lineEdit.returnPressed.connect(self.chat)
        
        self.thread.notify.connect(self.receiveMsg)

    def chat(self):
        self.user.sendMsg("chatRoom,"+self.UI.lineEdit.text())
        self.UI.lineEdit.clear()

    def skip(self):
        self.turn(False)

    def sortCard(e):
        return ((e.num*10)+e.suit)

    def play(self,msg):
        msg = "play"
        self.UI.temp.sort(key=sortCard)
        for x in temp:
            msg+=","+x.show()
        self.user.sendMsg(msg)
        self.turn(False)

    def setLblTemp(self,temp):
        for x in self.UI.lblTemp:
            x.hide()
        # temp = self.UI.temp
        for x in self.UI.lblTemp:
            x.setPixmap(QtGui.QPixmap())
        center = 6
        start = center - len(temp)/2
        for x in range(start,start+len(temp)):
            self.UI.lblTemp[x].setPixmap(QtGui.QPixmap(":/newPrefix/cards/"+temp[x-start]+".gif"))
            self.UI.lblTemp[x].show()

    def setLabel(self):
        for x in self.UI.label:
            x.hide()
        center = 6
        start = center - len(self.user.cards)/2
        for x in range(start,start+len(self.user.cards)):
            self.UI.label[x].setPixmap(QtGui.QPixmap(":/newPrefix/cards/"+self.user.cards[x-start]+".gif"))
            self.UI.label[x].show()

    def getCard(self, num, suit):
        card = card(num,suit)
        self.user.addCard(card)
        if len(self.user.cards) == 13:
            self.user.cards.sort(key=sortCard)
            for x in range(0,len(self.user.cards)):
                self.UI.label[x].setPixmap(QtGui.QPixmap(":/newPrefix/cards/"+self.user.cards[x]+".gif"))

    def finish(self,msg):
        msg.pop(0)
        m = ""
        for x in range(len(msg)):
            m+= str(x)+". "+msg[x]+"\n"

    def leave(self):
        self.user.sendMsg("leave")
        Ui_MainWindow(self.user)


    def turn(self,bl):
        self.UI.pushButton.setVisible(bl)
        self.UI.pushButton_2.setVisible(bl) 

    def  removeCard(self):
        for x in self.UI.temp:
            self.user.cards.remove(x)

    def changeCOD(self,msg):
        msg.pop(0)
        temp = []
        for x in msg:
            c = x.split("-")
            temp.append(card(int(c[0]),int(c[1])))
        self.setLblTemp(temp) 

    def startGame(self,msg):
        self.UI.start(self.size)

    def newJoin(self,msg):
        self.size+=1
        self.UI.newJoin()

    def receiveMsg(self,message):
        msg = message.split(',')
        if msg[0] == "chatRoom":
            self.UI.innerText(msg[2]+": "+msg[1])
        elif msg[0] == "release":
            self.getCard(int(msg[1]),int(msg[2]))
        elif msg[0] == "play":
            self.changeCOD(msg)
        elif msg[0] == "start":
            self.startGame()
        elif msg[0] == "move":
            self.turn(True)
        elif msg[0] == "legal":
            self.turn(False)
            self.removeCard()
            self.setLabel()
            self.UI.temp.clear()
        elif msg[0] == "move":
            self.turn(True)
        elif msg[0] == "notLegal":
            alert("đánh bài không hợp lệ")
            self.turn(True)
        elif msg[0] == "finish":
            self.finish(msg)
        elif msg[0] == "newJoin":
            self.newJoin(msg)





